// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const changePassword = `-- name: ChangePassword :exec
UPDATE users
SET pw_hash = $2
WHERE user_id = $1
`

type ChangePasswordParams struct {
	UserID int32
	PwHash []byte
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) error {
	_, err := q.db.Exec(ctx, changePassword, arg.UserID, arg.PwHash)
	return err
}

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (user_id, display_name)
VALUES ($1, $2)
RETURNING device_id, user_id, mac_addr, display_name
`

type CreateDeviceParams struct {
	UserID      int32
	DisplayName pgtype.Text
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice, arg.UserID, arg.DisplayName)
	var i Device
	err := row.Scan(
		&i.DeviceID,
		&i.UserID,
		&i.MacAddr,
		&i.DisplayName,
	)
	return i, err
}

const createProvisionStaging = `-- name: CreateProvisionStaging :exec
INSERT INTO provision_staging (device_id, contract)
VALUES ($1, $2)
`

type CreateProvisionStagingParams struct {
	DeviceID int32
	Contract pgtype.Text
}

func (q *Queries) CreateProvisionStaging(ctx context.Context, arg CreateProvisionStagingParams) error {
	_, err := q.db.Exec(ctx, createProvisionStaging, arg.DeviceID, arg.Contract)
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (user_id, token, expires_at)
VALUES ($1, $2, $3)
`

type CreateSessionParams struct {
	UserID    int32
	Token     string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, pw_hash, name)
VALUES ($1, $2, $3)
RETURNING user_id, email, name, pw_hash, created_at, last_login
`

type CreateUserParams struct {
	Email  string
	PwHash []byte
	Name   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.PwHash, arg.Name)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.PwHash,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const deleteProvisionStaging = `-- name: DeleteProvisionStaging :exec
DELETE FROM provision_staging 
WHERE device_id = $1
`

func (q *Queries) DeleteProvisionStaging(ctx context.Context, deviceID int32) error {
	_, err := q.db.Exec(ctx, deleteProvisionStaging, deviceID)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE token = $1
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteSession, token)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserSessions, userID)
	return err
}

const getDeviceByMacAddress = `-- name: GetDeviceByMacAddress :one
SELECT device_id, user_id, mac_addr, display_name FROM devices
WHERE mac_addr = $1 LIMIT 1
`

func (q *Queries) GetDeviceByMacAddress(ctx context.Context, macAddr pgtype.Text) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceByMacAddress, macAddr)
	var i Device
	err := row.Scan(
		&i.DeviceID,
		&i.UserID,
		&i.MacAddr,
		&i.DisplayName,
	)
	return i, err
}

const getDevicesByUser = `-- name: GetDevicesByUser :many
SELECT device_id, user_id, mac_addr, display_name FROM devices
WHERE user_id = $1
`

func (q *Queries) GetDevicesByUser(ctx context.Context, userID int32) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDevicesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.DeviceID,
			&i.UserID,
			&i.MacAddr,
			&i.DisplayName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProvisionStagingByContract = `-- name: GetProvisionStagingByContract :one
SELECT device_id, contract FROM provision_staging
WHERE contract = $1 LIMIT 1
`

func (q *Queries) GetProvisionStagingByContract(ctx context.Context, contract pgtype.Text) (ProvisionStaging, error) {
	row := q.db.QueryRow(ctx, getProvisionStagingByContract, contract)
	var i ProvisionStaging
	err := row.Scan(&i.DeviceID, &i.Contract)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT session_id, user_id, token, expires_at, created_at FROM sessions
WHERE token = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, token)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, email, name, pw_hash, created_at, last_login FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.PwHash,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserFromEmail = `-- name: GetUserFromEmail :one
SELECT user_id, email, name, pw_hash, created_at, last_login FROM users 
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserFromEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserFromEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.PwHash,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const renameDevice = `-- name: RenameDevice :exec
UPDATE devices
SET display_name = $2
WHERE device_id = $1
`

type RenameDeviceParams struct {
	DeviceID    int32
	DisplayName pgtype.Text
}

func (q *Queries) RenameDevice(ctx context.Context, arg RenameDeviceParams) error {
	_, err := q.db.Exec(ctx, renameDevice, arg.DeviceID, arg.DisplayName)
	return err
}

const updateDeviceMacAddress = `-- name: UpdateDeviceMacAddress :exec
UPDATE devices
SET mac_addr = $2
WHERE device_id = $1
`

type UpdateDeviceMacAddressParams struct {
	DeviceID int32
	MacAddr  pgtype.Text
}

func (q *Queries) UpdateDeviceMacAddress(ctx context.Context, arg UpdateDeviceMacAddressParams) error {
	_, err := q.db.Exec(ctx, updateDeviceMacAddress, arg.DeviceID, arg.MacAddr)
	return err
}

const updateLastLoginTime = `-- name: UpdateLastLoginTime :exec
UPDATE users
SET last_login = CURRENT_TIMESTAMP
WHERE user_id = $1
`

func (q *Queries) UpdateLastLoginTime(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, updateLastLoginTime, userID)
	return err
}
